<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new[]
    {
        typeof(sbyte),
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(byte), 
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
		typeof(Single),
        typeof(Double),
		typeof(decimal),
        typeof(bool), 
		typeof(char),
		typeof(DateTime),
		typeof(DateTimeOffset), 
		typeof(TimeSpan),
		typeof(Guid),
		typeof(string),
		typeof(Version),
		typeof(Uri)
    };
	var symbols = new []
	{
		typeof(char),
		typeof(byte),
	};
#>
using System;
using System.Collections.Generic;
using SpanJson;
using SpanJson.Formatters;
// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
namespace SpanJson.Formatters
{
<# foreach(var t in types) {
   foreach(var symbol in symbols) { 
	string utfName = null;
	if(symbol == typeof(char))
	{
		utfName = "Utf16";
	}
	else if(symbol == typeof(byte))
	{
		utfName = "Utf8";
	}
#>
    public sealed class <#= t.Name #><#= utfName #>Formatter<TResolver> : IJsonFormatter<<#= t.Name #>, <#= symbol.Name #>, TResolver> where TResolver : IJsonFormatterResolver<<#= symbol.Name #>, TResolver>, new()
    {
        public static readonly <#= t.Name #><#= utfName #>Formatter<TResolver> Default = new <#= t.Name #><#= utfName #>Formatter<TResolver>();

        public void Serialize(ref JsonWriter<<#= symbol.Name #>> writer, <#= t.Name #> value, int nestingLimit)
        {
<# if(!t.IsValueType) { #>
			if(value == null)
			{	
				writer.Write<#= utfName #>Null();
				return;
			}
<# } #>
            writer.Write<#= utfName #><#= t.Name #>(value);
        }

        public <#= t.Name #> Deserialize(ref JsonReader<<#= symbol.Name #>> reader)
        {
            return reader.Read<#= utfName #><#= t.Name #>();
        }
	} 
<# if(t.IsValueType) { #>
	public sealed class Nullable<#= t.Name #><#= utfName #>Formatter<TResolver> : NullableFormatter, IJsonFormatter<<#= t.Name #>?, <#= symbol.Name #>,TResolver> where TResolver : IJsonFormatterResolver<<#= symbol.Name #>, TResolver>, new()
    {
        public static readonly Nullable<#= t.Name #><#= utfName #>Formatter<TResolver> Default = new Nullable<#= t.Name #><#= utfName #>Formatter<TResolver>();

        public void Serialize(ref JsonWriter<<#= symbol.Name #>> writer, <#= t.Name #>? value, int nestingLimit)
        {
            Serialize(ref writer, value, <#= t.Name #><#= utfName #>Formatter<TResolver>.Default, nestingLimit);
        }

        public <#= t.Name #>? Deserialize(ref JsonReader<<#= symbol.Name #>> reader)
        {
			return Deserialize(ref reader, <#= t.Name #><#= utfName #>Formatter<TResolver>.Default);
        }
	}
    public sealed class Nullable<#= t.Name #><#= utfName #>ArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<<#= t.Name #>?[], <#= symbol.Name #>,TResolver> where TResolver : IJsonFormatterResolver<<#= symbol.Name #>, TResolver>, new()
    {
        public static readonly Nullable<#= t.Name #><#= utfName #>ArrayFormatter<TResolver> Default = new Nullable<#= t.Name #><#= utfName #>ArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter<<#= symbol.Name #>> writer, <#= t.Name #>?[] value, int nestingLimit)
        {
			Serialize(ref writer, value, Nullable<#= t.Name #><#= utfName #>Formatter<TResolver>.Default, nestingLimit);
        }

        public <#= t.Name #>?[] Deserialize(ref JsonReader<<#= symbol.Name #>> reader)
        {
            return Deserialize(ref reader, Nullable<#= t.Name #><#= utfName #>Formatter<TResolver>.Default);
        }
	}

	public sealed class Nullable<#= t.Name #><#= utfName #>ListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<<#= t.Name #>?>, <#= symbol.Name #>,TResolver> where TResolver : IJsonFormatterResolver<<#= symbol.Name #>, TResolver>, new()
    {
        public static readonly Nullable<#= t.Name #><#= utfName #>ListFormatter<TResolver> Default = new Nullable<#= t.Name #><#= utfName #>ListFormatter<TResolver>();
		private static readonly Func<List<<#= t.Name #>?>> CreateFunctor = () => new List<<#= t.Name #>?>();

        public void Serialize(ref JsonWriter<<#= symbol.Name #>> writer, List<<#= t.Name #>?> value, int nestingLimit)
        {
			Serialize(ref writer, value, Nullable<#= t.Name #><#= utfName #>Formatter<TResolver>.Default, nestingLimit);
        }

        public List<<#= t.Name #>?> Deserialize(ref JsonReader<<#= symbol.Name #>> reader)
        {
            return Deserialize(ref reader, Nullable<#= t.Name #><#= utfName #>Formatter<TResolver>.Default, CreateFunctor);
        }	
	}
<# } #>

    public sealed class <#= t.Name #><#= utfName #>ArrayFormatter<TResolver> : ArrayFormatter, IJsonFormatter<<#= t.Name #>[], <#= symbol.Name #>, TResolver> where TResolver : IJsonFormatterResolver<<#= symbol.Name #>, TResolver>, new()
    {
        public static readonly <#= t.Name #><#= utfName #>ArrayFormatter<TResolver> Default = new <#= t.Name #><#= utfName #>ArrayFormatter<TResolver>();

        public void Serialize(ref JsonWriter<<#= symbol.Name #>> writer, <#= t.Name #>[] value, int nestingLimit)
        {
			Serialize(ref writer, value, <#= t.Name #><#= utfName #>Formatter<TResolver>.Default, nestingLimit);
        }

        public <#= t.Name #>[] Deserialize(ref JsonReader<<#= symbol.Name #>> reader)
        {
            return Deserialize(ref reader, <#= t.Name #><#= utfName #>Formatter<TResolver>.Default);
        }
	}

	public sealed class <#= t.Name #><#= utfName #>ListFormatter<TResolver> : ListFormatter, IJsonFormatter<List<<#= t.Name #>>, <#= symbol.Name #>,TResolver> where TResolver : IJsonFormatterResolver<<#= symbol.Name #>, TResolver>, new()
    {
        public static readonly <#= t.Name #><#= utfName #>ListFormatter<TResolver> Default = new <#= t.Name #><#= utfName #>ListFormatter<TResolver>();
		private static readonly Func<List<<#= t.Name #>>> CreateFunctor = () => new List<<#= t.Name #>>();

        public void Serialize(ref JsonWriter<<#= symbol.Name #>> writer, List<<#= t.Name #>> value, int nestingLimit)
        {
			Serialize(ref writer, value, <#= t.Name #><#= utfName #>Formatter<TResolver>.Default, nestingLimit);
        }

        public List<<#= t.Name #>> Deserialize(ref JsonReader<<#= symbol.Name #>> reader)
        {
            return Deserialize(ref reader, <#= t.Name #><#= utfName #>Formatter<TResolver>.Default, CreateFunctor);
        }	
	}
<# } #>
<# } #>
}